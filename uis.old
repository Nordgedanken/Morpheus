	widget := widgets.NewQWidget(nil, 0)
	widget.SetObjectName("MainWrapper")
	widget.SetStyleSheet("QWidget#MainWrapper { border: 0px; };")
	window.SetupUi(widget)
	topLayout := widgets.NewQVBoxLayout2(widget)
	topLayout.SetSpacing(0)

	// var (
	// 	usernameLabel = widgets.NewQLabelFromPointer(widget.FindChild("UsernameLabel", core.Qt__FindChildrenRecursively).Pointer())
	// 	mxidLabel     = widgets.NewQLabelFromPointer(widget.FindChild("MXIDLabel", core.Qt__FindChildrenRecursively).Pointer())
	// 	avatarLogo    = widgets.NewQLabelFromPointer(widget.FindChild("AvatarLabel", core.Qt__FindChildrenRecursively).Pointer())
	// )
	//
	// // Set MXID Label
	// mxidLabel.SetText(fmt.Sprint(username))
	//
	// // Set Dispalyname Label
	// displayName, displayNameErr := cli.GetUserDisplayName(username)
	// if displayNameErr != nil {
	// 	localLog.Println(displayNameErr)
	// }
	// usernameLabel.SetText(fmt.Sprint(displayName))
	//
	// // Set Avatar
	// avatarLogo.SetAlignment(core.Qt__AlignBottom | core.Qt__AlignRight)
	// avatarLogo.SetPixmap(cli.GetOwnUserAvatar())

	// Wrapper
	wrapperWidget := widgets.NewQGroupBox2("", nil)
	wrapperWidget.SetContentsMargins(0, 0, 0, 0)
	wrapperWidget.SetObjectName("MainWrapperWidget")
	wrapperWidget.SetStyleSheet("QWidget#MainWrapperWidget { border: 0px; };")
	wrapperLayout := widgets.NewQGridLayout2()
	wrapperLayout.SetSpacing(0)
	wrapperLayout.SetContentsMargins(0, 0, 0, 0)

	// Roomlist
	roomList, roomListLayout := elements.NewRoomList()

	// Fake Room
	elements.NewRoom("Test", roomListLayout)

	wrapperLayout.AddWidget(roomList, 0, 0, 0)

	// Message View
	messageList, messageListLayout := elements.NewMessageList()

	// Messages
	syncer := cli.Syncer.(*gomatrix.DefaultSyncer)
	customStore := gomatrix.NewInMemoryStore()
	cli.Store = customStore
	syncer.Store = customStore
	syncer.OnEventType("m.room.message", func(ev *gomatrix.Event) {
		// TODO Later needs to match current Room
		if ev.RoomID == "!zTIXGmDjyRcAqbrWab:matrix.ffslfl.net" {
			messageBody, messageOk := ev.Body()
			if messageOk == true {
				elements.NewMessage(messageBody, messageListLayout)
			} else {
				localLog.Println("Message not ok: ", messageOk)
			}
		}
	})

	// Start Non-blocking sync
	localLog.Println("Syncing now")
	go func() {
		for {
			fmt.Println("sync")
			if e := cli.Sync(); e != nil {
				fmt.Println("Fatal Sync() error")
				time.Sleep(10 * time.Second)
			}
			time.Sleep(10 * time.Second)
		}
	}()

	localLog.Println("Started Syncing")

	wrapperLayout.AddWidget(messageList, 0, 1, 0)

	// logoutButton //TODO move it to correct place
	buttonWidget := widgets.NewQWidget(nil, 0)
	buttonLayout := widgets.NewQVBoxLayout()
	buttonLayout.SetSpacing(0)

	logoutButton := widgets.NewQPushButton2("LOGOUT", nil)
	logoutButton.SetMinimumSize2(350, 65)

	buttonLayout.AddStretch(1)
	buttonLayout.AddWidget(logoutButton, 0, 0)
	buttonLayout.AddStretch(1)

	buttonWidget.SetLayout(buttonLayout)
	wrapperLayout.AddWidget(buttonWidget, 1, 0, core.Qt__AlignBottom)

	logoutButton.ConnectClicked(func(checked bool) {
		//TODO register enter and show loader or so
		localLog.Println("Starting Logout Sequenze in background")
		var wg sync.WaitGroup
		results := make(chan bool)

		wg.Add(1)
		go func(cli *gomatrix.Client, localLog *log.Logger, results chan<- bool) {
			defer wg.Done()
			_, err := cli.Logout()
			if err != nil {
				localLog.Println(err)
				results <- false
			} else {
				cli.ClearCredentials()
				//Flush complete DB
				db.View(func(tx *buntdb.Tx) error {
					var QueryErr error
					QueryErr = tx.DeleteAll()
					if QueryErr != nil {
						return QueryErr
					}
					return nil
				})
				results <- true
			}
		}(cli, localLog, results)

		go func() {
			wg.Wait()      // wait for each execTask to return
			close(results) // then close the results channel
		}()

		//Show MainUI
		for result := range results {
			if result {
				LoginUI := NewLoginUI(windowWidth, windowHeight)
				window.SetCentralWidget(LoginUI)
			}
		}
	})

	wrapperLayout.SetColumnMinimumWidth(0, windowWidth/3)
	wrapperLayout.SetColumnMinimumWidth(1, (windowWidth/3)*2)
	wrapperLayout.SetRowMinimumHeight(0, windowHeight)
	wrapperWidget.SetLayout(wrapperLayout)
	topLayout.AddWidget(wrapperWidget, 1, core.Qt__AlignVCenter)
	widget.SetLayout(topLayout)

	return widget